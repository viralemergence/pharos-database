AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for the primary shared resources
  between prod and dev pharos deployments, including
  igw, nat, rds, vpc and proxy configuration.

Parameters:
  RDSName:
    Type: String
    Default: RDS
  ProxyName:
    Type: String
    Default: Proxy
  RDSProxyPolicyName:
    Type: String
    Default: proxy-policy
  Port:
    Type: String
    Default: "5432"
  RDSInstancePolicyName:
    Type: String
    Default: rds-policy

Resources:
  ## Create VPC for Pharos
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Pharos-VPC

  ## Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway

  ## Connect Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  ## Reserve Elastic IP address for Nat Gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  ## Nat Gateway to allow lambda functions to
  ## to connect over the internet to resources
  ## such as secrets manager, S3, Dynamodb, etc.
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATGatewayEIP
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref LambdaPublicSubnet

  ##
  ## Subnets
  ##

  ## Database subnets
  DatabaseSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: "DatabaseSubnetA"

  DatabaseSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: "DatabaseSubnetB"

  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Join ["-", [!Ref AWS::StackName, "SubnetGroup"]]
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB

  ## The subnet which should point to the NAT
  ## gateway so that these lambdas can use it
  ## to call resources on the internet
  LambdaSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/24
      Tags:
        - Key: "Name"
          Value: "LambdaSubnet"

  ## The subnet which points to the IGW
  ## so that the nat gateway can reach the
  ## internet
  LambdaPublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      VpcId: !Ref VPC
      CidrBlock: 10.0.48.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: "Name"
          Value: "LambdaPublicSubnet"

  ##
  ## Route Tables
  ##

  ## This route table connects resources
  ## which need to use the IGW to reach
  ## and be reached by the internet, like the
  ## RDS instance (for whitelisted direct access)
  DatabaseRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DatabaseRouteTable

  ## Connect Database subnets to the main route table
  DatabaseSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnetA

  DatabaseSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnetB

  ## Route internet traffic from the Route
  ## table to the internet through the IGW
  DatabaseInternetRouteRule:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  ## Route table for lambda functions
  ## to access the NAT gateway
  NatRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: NatRouteTable

  ## Route rule to direct traffic from
  ## the lambda subnet to the nat gateway
  NatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ## Connect lambda subnet to the Nat Route table
  LambdaSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable
      SubnetId: !Ref LambdaSubnet

  ## Route table to connect the nat gateway
  ## to the internet gateway
  NatToIGWRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: NatToIGWRouteTable

  NatToIGWAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatToIGWRouteTable
      SubnetId: !Ref LambdaPublicSubnet

  ## Route rule to direct traffic from
  ## the NAT gateway to the internet
  NatToIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatToIGWRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  ## Primary security group restricting access to DB
  ## instance. Ingress rules here will give direct
  ## access to the database and other resources.
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Join ["-", [!Ref AWS::StackName, "SecurityGroup"]]
      GroupDescription: "RDS traffic"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

      ## Example for whitelisting an
      ## IP address for direct access
      # SecurityGroupIngress:
      #   - IpProtocol: tcp
      #     FromPort: !Ref Port
      #     ToPort: !Ref Port
      #     CidrIp: xxx.xxx.xxx.xx/32
      #     Description: "Ingress rule description"

  ## Allow resources within the InstanceSecurityGroup to
  ## connect to other resources within the same SG. This
  ## Gives the API lambda functions permission to connect
  ## to the RDS proxy, for example.
  InstanceSecurityGroupAllowSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref Port
      ToPort: !Ref Port
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  ## Admin password for database
  DBAdminSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ["-", [!Ref AWS::StackName, DBAdminSecret]]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: DBAdminSecret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceClass: db.t3.small
      AllocatedStorage: "20"
      Engine: postgres
      EngineVersion: "15"
      PubliclyAccessible: True
      AssociatedRoles:
        - FeatureName: s3Export
          RoleArn: !GetAtt RDSInstanceRole.Arn
      DBSubnetGroupName: !Ref "SubnetGroup"
      DBInstanceIdentifier: !Join ["-", [!Ref AWS::StackName, !Ref RDSName]]
      AllowMajorVersionUpgrade: True
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdminSecret}::username}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${DBAdminSecret}::password}}"
      VPCSecurityGroups:
        - !Ref InstanceSecurityGroup

  SecretRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: DBAdminSecret
      TargetId:
        Ref: RDSInstance
      TargetType: AWS::RDS::DBInstance

  RDSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - rds.amazonaws.com

  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - rds.amazonaws.com
      Policies:
        - PolicyName:
            !Join ["-", [!Ref AWS::StackName, !Ref RDSProxyPolicyName]]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DBAdminSecret
              - Effect: Allow
                Action: "kms:Decrypt"
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com

  ## Proxy to manage the lambda functions' database connections.
  ## This allows for long-lived connections and connection pooling
  ## even though API responses are generated by short-lived functions.
  RDSProxy:
    Type: AWS::RDS::DBProxy
    DependsOn: RDSInstance
    Properties:
      Auth:
        - AuthScheme: SECRETS
          IAMAuth: DISABLED
          SecretArn: !Ref DBAdminSecret
      DBProxyName: !Join ["-", [!Ref AWS::StackName, !Ref ProxyName]]
      EngineFamily: POSTGRESQL
      IdleClientTimeout: 600
      DebugLogging: True
      RequireTLS: True
      RoleArn: !GetAtt RDSProxyRole.Arn
      VpcSubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB
      VpcSecurityGroupIds:
        - !Ref InstanceSecurityGroup

  ProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    DependsOn: RDSProxy
    Properties:
      DBProxyName: !Join ["-", [!Ref AWS::StackName, !Ref ProxyName]]
      DBInstanceIdentifiers:
        - !Ref RDSInstance
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
        MaxConnectionsPercent: 100
        MaxIdleConnectionsPercent: 12
        ConnectionBorrowTimeout: 20

Outputs:
  RDSInstance:
    Description: RDS instance name
    Value: !Ref RDSInstance
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstance
  RDSInstanceRole:
    Description: RDS instance role
    Value: !Ref RDSInstanceRole
    Export:
      Name: !Sub ${AWS::StackName}-RDSInstanceRole
  RDSEndpoint:
    Description: RDS endpoint or host
    Value: !GetAtt [RDSInstance, Endpoint.Address]
    Export:
      Name: !Sub ${AWS::StackName}-RDSEndpoint
  Secret:
    Description: RDS master username, password, and connection details
    Value: !Ref DBAdminSecret
    Export:
      Name: !Sub ${AWS::StackName}-Secret
  RDSPort:
    Description: RDS port
    Value: !GetAtt [RDSInstance, Endpoint.Port]
    Export:
      Name: !Sub ${AWS::StackName}-Port
  RDSProxy:
    Description: Proxy
    Value: !GetAtt RDSProxy.DBProxyArn
    Export:
      Name: !Sub ${AWS::StackName}-RDSProxyArn
  RDSProxyEndpoint:
    Description: Proxy endpoint
    Value: !GetAtt RDSProxy.Endpoint
    Export:
      Name: !Sub ${AWS::StackName}-RDSProxyEndpoint
  VPCInstance:
    Description: VPC for RDS and proxy
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCInstance
  VPCSecurityGroup:
    Description: Security group associated with the vpc
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-VPCSG
  DatabaseSubnetA:
    Description: Database Subnet AZ 0
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetA
  DatabaseSubnetB:
    Description: Database Subnet AZ 1
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetB
  LambdaSubnet:
    Description: Lambda Function Subnet
    Value: !Ref LambdaSubnet
    Export:
      Name: !Sub ${AWS::StackName}-LambdaSubnet
